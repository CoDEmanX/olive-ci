name: Issue Test

on:
  issue_comment:

env:
  ENV_KEY: workflow level

jobs:
  pr-commented:
    name: PR commented
    if: github.event.issue.pull_request
    runs-on: ubuntu-latest
    outputs:
      gh_env: ${{ steps.set-env-output.outputs.gh_env }}
    env:
      ENV_KEY: job level
    steps:
      - name: Set shared env var
        id: set-github-env
        run: |
          echo 'ENV_VAR_1<<EOF' >> $GITHUB_ENV
          echo 'foo' >> $GITHUB_ENV
          echo 'bar' >> $GITHUB_ENV
          echo 'do not eval `this`' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          echo 'ENV_VAR_2=single line' >> $GITHUB_ENV
          echo "::save-state name=SAVED_ENV::apparently only available in actions"
      - name: Set env as output
        id: set-env-output
        run: |
          echo "ENV_VAR_1 = $ENV_VAR_1"
          echo "ENV_VAR_2 = $ENV_VAR_2"
          echo "STATE_SAVED_ENV = $STATE_SAVED_ENV"
          echo "env.STATE_SAVED_ENV = ${{ env.STATE_SAVED_ENV }}"
          echo '::group::File Properties'
          echo "Env file: $GITHUB_ENV"
          ls -la $GITHUB_ENV
          if [[ -e $GITHUB_ENV ]]; then echo 'exists'; fi
          if [[ -r $GITHUB_ENV ]]; then echo 'readable'; fi
          if [[ -w $GITHUB_ENV ]]; then echo 'writable'; fi
          if [[ -s $GITHUB_ENV ]]; then echo 'size greater than zero'; fi
          if [[ -f $GITHUB_ENV ]]; then echo 'is regular file'; fi
          if [[ -h $GITHUB_ENV ]]; then echo 'is symbolic link'; fi
          if [[ -p $GITHUB_ENV ]]; then echo 'is named pipe'; fi
          if [[ -S $GITHUB_ENV ]]; then echo 'is socket'; fi
          echo '::endgroup::'
          echo "Content (cat): $(cat $GITHUB_ENV)"
          cat $GITHUB_ENV
          echo "Content (tail): $(tail $GITHUB_ENV)"
          cat $GITHUB_ENV
          echo "Content (redirect): $(<$GITHUB_ENV)"
          GH_ENV=$(<$GITHUB_ENV)
          echo "GH_ENV = $GH_ENV"
          echo "::set-output name=gh_env::$GH_ENV"
      - name: env.GITHUB_WORKSPACE=${{ env.GITHUB_WORKSPACE}}, env.ENV_KEY=${{ env.ENV_KEY }}
        run: |
          echo "env context only available in with, name and if keys."
          echo "\$ENV_KEY = $ENV_KEY"
          echo "env.ENV_KEY = ${{ env.ENV_KEY }}"
          echo "\$GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          echo "env.GITHUB_WORKSPACE = ${{ env.GITHUB_WORKSPACE }}"
          export EXPORT_VAR="limited to this step"
          echo "\$EXPORT_VAR = $EXPORT_VAR"
          echo "env.EXPORT_VAR = ${{ env.EXPORT_VAR }}"
      - name: Check output
        run: |
          echo 'gh_env = ${{ steps.set-env-output.outputs.gh_env }}'
      - uses: actions/github-script@v3
        id: get-pr
        with:
          result-encoding: string
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return JSON.stringify(result.data, null, 2)
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }
      - name: Print PR info
        env:
          #PR_INFO: ${{ toJSON(fromJSON(steps.get-pr.outputs.result)) }}
          PR_INFO: ${{ steps.get-pr.outputs.result }}
        run: |
          echo "$PR_INFO"
      - uses: actions/checkout@v2
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.sha }} # or .head.ref for branch name
      - name: Print Git info
        run: |
          git log -1
          git remote -v
      - name: Default env vars
        env:
          ENV_KEY: step level
        run: |
          echo "::echo::off"
          echo "::add-mask::yourpassword"
          echo "Password: yourpassword"
          localpw1="localpassword1"
          localpw2="localpassword2"
          localpw3="localpassword3"
          echo "::add-mask::$localpw1"
          echo "::add-mask::$(echo $localpw2)"
          echo "::add-mask::$[localpw3]"
          echo "Local passwords: localpassword1 localpassword2 localpassword3"
          echo "\$ENV_KEY = $ENV_KEY"
          echo "env.ENV_KEY = ${{ env.ENV_KEY }}"
          echo "\$EXPORT_VAR = $EXPORT_VAR"
          echo "env.EXPORT_VAR = ${{ env.EXPORT_VAR }}"
          echo "::echo::on"
          echo "::add-mask::mypassword"
          echo "Password: mypassword"
          echo "\$GITHUB_REPOSITORY = $GITHUB_REPOSITORY"
          echo "\$GITHUB_SHA = $GITHUB_SHA"
          echo "\$GITHUB_REF = $GITHUB_REF"
          echo "\$GITHUB_HEAD_REF = $GITHUB_HEAD_REF"
          echo "\$GITHUB_BASE_REF = $GITHUB_BASE_REF"
      - name: GitHub Event (env)
        env:
          GITHUB_EVENT: ${{ toJSON(github.event) }}
        run: |
          echo "$GITHUB_EVENT"
      - name: GitHub Event (cat, no substitution)
        run: |
          cat<<'EOF'
            ${{ toJSON(github.event) }}
          EOF
      - name: GitHub Event (cat, with substitution)
        run: |
          cat<<EOF
            ${{ toJSON(github.event) }}
          EOF
  post:
    name: Post job
    needs: pr-commented
    runs-on: ubuntu-latest
    steps:
      - name: Get/set env from other job
        env:
          SHARED_ENV: ${{ needs.pr-commented.outputs.gh_env }}
        run: |
          echo "SHARED_ENV = $SHARED_ENV"
          echo "$SHARED_ENV" >> $GITHUB_ENV
      - name: Copied env vars
        run: |
          echo "ENV_VAR_1 = $ENV_VAR_1"
          echo "ENV_VAR_2 = $ENV_VAR_2"
